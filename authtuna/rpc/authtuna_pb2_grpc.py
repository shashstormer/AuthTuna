# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import authtuna_pb2 as authtuna__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in authtuna_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthTunaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/authtuna.AuthTunaService/Authenticate',
                request_serializer=authtuna__pb2.AuthRequest.SerializeToString,
                response_deserializer=authtuna__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.GetUserInfo = channel.unary_unary(
                '/authtuna.AuthTunaService/GetUserInfo',
                request_serializer=authtuna__pb2.UserInfoRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserInfoResponse.FromString,
                _registered_method=True)
        self.GetUserById = channel.unary_unary(
                '/authtuna.AuthTunaService/GetUserById',
                request_serializer=authtuna__pb2.UserIdRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.GetUserByEmail = channel.unary_unary(
                '/authtuna.AuthTunaService/GetUserByEmail',
                request_serializer=authtuna__pb2.UserEmailRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/authtuna.AuthTunaService/CreateUser',
                request_serializer=authtuna__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/authtuna.AuthTunaService/UpdateUser',
                request_serializer=authtuna__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/authtuna.AuthTunaService/DeleteUser',
                request_serializer=authtuna__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.SuspendUser = channel.unary_unary(
                '/authtuna.AuthTunaService/SuspendUser',
                request_serializer=authtuna__pb2.SuspendUserRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.UnsuspendUser = channel.unary_unary(
                '/authtuna.AuthTunaService/UnsuspendUser',
                request_serializer=authtuna__pb2.UnsuspendUserRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/authtuna.AuthTunaService/ListUsers',
                request_serializer=authtuna__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserListResponse.FromString,
                _registered_method=True)
        self.SearchUsers = channel.unary_unary(
                '/authtuna.AuthTunaService/SearchUsers',
                request_serializer=authtuna__pb2.SearchUsersRequest.SerializeToString,
                response_deserializer=authtuna__pb2.UserListResponse.FromString,
                _registered_method=True)


class AuthTunaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Authenticate a user and return a token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfo(self, request, context):
        """Get user info by token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserById(self, request, context):
        """User management RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SuspendUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsuspendUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthTunaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=authtuna__pb2.AuthRequest.FromString,
                    response_serializer=authtuna__pb2.AuthResponse.SerializeToString,
            ),
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=authtuna__pb2.UserInfoRequest.FromString,
                    response_serializer=authtuna__pb2.UserInfoResponse.SerializeToString,
            ),
            'GetUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserById,
                    request_deserializer=authtuna__pb2.UserIdRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'GetUserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByEmail,
                    request_deserializer=authtuna__pb2.UserEmailRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=authtuna__pb2.CreateUserRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=authtuna__pb2.UpdateUserRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=authtuna__pb2.DeleteUserRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'SuspendUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SuspendUser,
                    request_deserializer=authtuna__pb2.SuspendUserRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'UnsuspendUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsuspendUser,
                    request_deserializer=authtuna__pb2.UnsuspendUserRequest.FromString,
                    response_serializer=authtuna__pb2.UserResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=authtuna__pb2.ListUsersRequest.FromString,
                    response_serializer=authtuna__pb2.UserListResponse.SerializeToString,
            ),
            'SearchUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchUsers,
                    request_deserializer=authtuna__pb2.SearchUsersRequest.FromString,
                    response_serializer=authtuna__pb2.UserListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authtuna.AuthTunaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('authtuna.AuthTunaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthTunaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/Authenticate',
            authtuna__pb2.AuthRequest.SerializeToString,
            authtuna__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/GetUserInfo',
            authtuna__pb2.UserInfoRequest.SerializeToString,
            authtuna__pb2.UserInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/GetUserById',
            authtuna__pb2.UserIdRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/GetUserByEmail',
            authtuna__pb2.UserEmailRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/CreateUser',
            authtuna__pb2.CreateUserRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/UpdateUser',
            authtuna__pb2.UpdateUserRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/DeleteUser',
            authtuna__pb2.DeleteUserRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SuspendUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/SuspendUser',
            authtuna__pb2.SuspendUserRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnsuspendUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/UnsuspendUser',
            authtuna__pb2.UnsuspendUserRequest.SerializeToString,
            authtuna__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/ListUsers',
            authtuna__pb2.ListUsersRequest.SerializeToString,
            authtuna__pb2.UserListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authtuna.AuthTunaService/SearchUsers',
            authtuna__pb2.SearchUsersRequest.SerializeToString,
            authtuna__pb2.UserListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

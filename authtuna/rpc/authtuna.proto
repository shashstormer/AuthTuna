syntax = "proto3";

package authtuna;

service AuthTunaService {
  // Authenticate a user and return a token
  rpc Authenticate (AuthRequest) returns (AuthResponse);

  // Get user info by token
  rpc GetUserInfo (UserInfoRequest) returns (UserInfoResponse);

  // User management RPCs
  rpc GetUserById (UserIdRequest) returns (UserResponse);
  rpc GetUserByEmail (UserEmailRequest) returns (UserResponse);
  rpc CreateUser (CreateUserRequest) returns (UserResponse);
  rpc UpdateUser (UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser (DeleteUserRequest) returns (UserResponse);
  rpc SuspendUser (SuspendUserRequest) returns (UserResponse);
  rpc UnsuspendUser (UnsuspendUserRequest) returns (UserResponse);
  rpc ListUsers (ListUsersRequest) returns (UserListResponse);
  rpc SearchUsers (SearchUsersRequest) returns (UserListResponse);
  // RoleManager
  rpc GetAllRoles (google.protobuf.Empty) returns (RoleListResponse);
  rpc GetRoleByName (RoleNameRequest) returns (RoleResponse);
  rpc CreateRole (Role) returns (RoleResponse);
  rpc AssignRoleToUser (AssignRoleRequest) returns (RoleResponse);
  rpc RemoveRoleFromUser (RemoveRoleRequest) returns (RoleResponse);
  rpc GetUsersForRole (RoleNameRequest) returns (UserListResponse);
  // PermissionManager
  rpc GetPermissionByName (PermissionNameRequest) returns (PermissionResponse);
  rpc CreatePermission (Permission) returns (PermissionResponse);
  // SessionManager
  rpc GetSessionById (SessionIdRequest) returns (SessionResponse);
  rpc CreateSession (Session) returns (SessionResponse);
  rpc TerminateSession (SessionIdRequest) returns (SessionResponse);
  rpc ListSessionsForUser (UserIdRequest) returns (SessionListResponse);
  // TokenManager
  rpc CreateToken (Token) returns (TokenResponse);
  rpc ValidateToken (TokenIdRequest) returns (UserResponse);
  // MFAManager
  rpc SetupTOTP (MFASetupRequest) returns (MFASetupResponse);
  rpc VerifyAndEnableTOTP (MFAVerifyRequest) returns (MFAResponse);
  rpc DisableMFA (UserIdRequest) returns (MFAResponse);
  // AuditManager
  rpc GetEventsForUser (AuditUserRequest) returns (AuditEventListResponse);
  rpc GetEventsByType (AuditTypeRequest) returns (AuditEventListResponse);
}

message AuthRequest {
  string username = 1;
  string password = 2;
}

message AuthResponse {
  string token = 1;
  string error = 2;
}

message UserInfoRequest {
  string token = 1;
}

message UserInfoResponse {
  string username = 1;
  string email = 2;
  bool mfa_enabled = 3;
  string error = 4;
}

// User management messages
message User {
  string id = 1;
  string username = 2;
  string email = 3;
  bool mfa_enabled = 4;
  bool suspended = 5;
}

message UserIdRequest {
  string id = 1;
}

message UserEmailRequest {
  string email = 1;
}

message UserResponse {
  User user = 1;
  string error = 2;
}

message UserListResponse {
  repeated User users = 1;
  string error = 2;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message UpdateUserRequest {
  string id = 1;
  string username = 2;
  string email = 3;
  string password = 4;
}

message DeleteUserRequest {
  string id = 1;
}

message SuspendUserRequest {
  string id = 1;
  string admin_id = 2;
  string reason = 3;
}

message UnsuspendUserRequest {
  string id = 1;
  string admin_id = 2;
  string reason = 3;
}

message ListUsersRequest {
  int32 skip = 1;
  int32 limit = 2;
}

message SearchUsersRequest {
  string identity = 1;
  int32 skip = 2;
  int32 limit = 3;
}

// Role management messages
message Role {
  string id = 1;
  string name = 2;
  string description = 3;
  bool system = 4;
  int32 level = 5;
}

message RoleNameRequest {
  string name = 1;
}

message RoleIdRequest {
  string id = 1;
}

message RoleResponse {
  Role role = 1;
  string error = 2;
}

message RoleListResponse {
  repeated Role roles = 1;
  string error = 2;
}

message AssignRoleRequest {
  string user_id = 1;
  string role_name = 2;
  string assigner_id = 3;
  string scope = 4;
}

message RemoveRoleRequest {
  string user_id = 1;
  string role_name = 2;
  string remover_id = 3;
  string scope = 4;
}

// Permission management messages
message Permission {
  string id = 1;
  string name = 2;
  string description = 3;
}

message PermissionNameRequest {
  string name = 1;
}

message PermissionResponse {
  Permission permission = 1;
  string error = 2;
}

message PermissionListResponse {
  repeated Permission permissions = 1;
  string error = 2;
}

// Session management messages
message Session {
  string session_id = 1;
  string user_id = 2;
  string create_ip = 3;
  string last_ip = 4;
  string region = 5;
  string device = 6;
  bool active = 7;
}

message SessionIdRequest {
  string session_id = 1;
}

message SessionResponse {
  Session session = 1;
  string error = 2;
}

message SessionListResponse {
  repeated Session sessions = 1;
  string error = 2;
}

// Token management messages
message Token {
  string id = 1;
  string user_id = 2;
  string purpose = 3;
  double etime = 4;
  bool used = 5;
}

message TokenIdRequest {
  string id = 1;
  string purpose = 2;
}

message TokenResponse {
  Token token = 1;
  string error = 2;
}

// MFA management messages
message MFASetupRequest {
  string user_id = 1;
  string issuer_name = 2;
}

message MFASetupResponse {
  string secret = 1;
  string uri = 2;
  string error = 3;
}

message MFAVerifyRequest {
  string user_id = 1;
  string code = 2;
}

message MFAResponse {
  bool success = 1;
  string error = 2;
}

// Audit management messages
message AuditEvent {
  string id = 1;
  string user_id = 2;
  string event_type = 3;
  double timestamp = 4;
  string ip_address = 5;
  string details = 6;
}

message AuditUserRequest {
  string user_id = 1;
  int32 skip = 2;
  int32 limit = 3;
}

message AuditTypeRequest {
  string event_type = 1;
  int32 skip = 2;
  int32 limit = 3;
}

message AuditEventListResponse {
  repeated AuditEvent events = 1;
  string error = 2;
}
